openapi: 3.0.0
info:
  title: Combined API Specification
  version: 1.0.0
paths:
  /register:
    post:
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistration'
      responses:
        '201':
          description: User registered successfully!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad Request
  /login:
    post:
      summary: Login an existing user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
      responses:
        '200':
          description: Login successful!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
  /users:
    get:
      summary: Get all users
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      summary: Create a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad Request
  /users/{id}:
    get:
      summary: Get a user by ID
      parameters:
      - name: id
        in: path
        description: ID of the user to retrieve
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
    put:
      summary: Update an existing user
      parameters:
      - name: id
        in: path
        description: ID of the user to update
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad Request
        '404':
          description: User not found
    delete:
      summary: Delete a user
      parameters:
      - name: id
        in: path
        description: ID of the user to delete
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '204':
          description: User deleted successfully
        '404':
          description: User not found
  /api/auth/register:
    post:
      summary: Register a new user
      responses:
        '200':
          description: Register a new user
  /api/auth/login:
    post:
      summary: Login user
      responses:
        '200':
          description: Login user
  /api/auth/refresh:
    post:
      summary: Refresh JWT token
      responses:
        '200':
          description: Refresh JWT token
  /api/auth/logout:
    post:
      summary: Logout user
      responses:
        '200':
          description: Logout user
  /api/auth/me:
    get:
      summary: Get authenticated user details
      responses:
        '200':
          description: Get authenticated user details
  /api/users:
    get:
      summary: List all users
      responses:
        '200':
          description: List all users
    post:
      summary: Create a new user
      responses:
        '200':
          description: Create a new user
  /api/users/{id}:
    get:
      summary: 'Get user details for ID: {id}'
      parameters:
      - name: id
        in: path
        description: User ID
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: 'Get user details for ID: {id}'
    put:
      summary: 'Update user details for ID: {id}'
      parameters:
      - name: id
        in: path
        description: User ID
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: 'Update user details for ID: {id}'
    delete:
      summary: 'Delete user with ID: {id}'
      parameters:
      - name: id
        in: path
        description: User ID
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: 'Delete user with ID: {id}'
  /api/users/{id}/activate:
    patch:
      summary: 'Activate user with ID: {id}'
      parameters:
      - name: id
        in: path
        description: User ID
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: 'Activate user with ID: {id}'
  /api/users/{id}/deactivate:
    patch:
      summary: 'Deactivate user with ID: {id}'
      parameters:
      - name: id
        in: path
        description: User ID
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: 'Deactivate user with ID: {id}'
  /api/roles:
    get:
      summary: List all roles
      responses:
        '200':
          description: List all roles
    post:
      summary: Create a new role
      responses:
        '200':
          description: Create a new role
  /api/roles/{id}:
    get:
      summary: 'Get role details for ID: {id}'
      parameters:
      - name: id
        in: path
        description: Role ID
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: 'Get role details for ID: {id}'
    put:
      summary: 'Update role details for ID: {id}'
      parameters:
      - name: id
        in: path
        description: Role ID
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: 'Update role details for ID: {id}'
    delete:
      summary: 'Delete role with ID: {id}'
      parameters:
      - name: id
        in: path
        description: Role ID
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: 'Delete role with ID: {id}'
  /api/roles/{id}/assign:
    patch:
      summary: 'Assign role with ID: {id}'
      parameters:
      - name: id
        in: path
        description: Role ID
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: 'Assign role with ID: {id}'
  /api/admin/stats:
    get:
      summary: Get application statistics
      responses:
        '200':
          description: Get application statistics
  /api/admin/users:
    delete:
      summary: Bulk delete users
      responses:
        '200':
          description: Bulk delete users
  /api/admin/users/bulk:
    post:
      summary: Bulk create users
      responses:
        '200':
          description: Bulk create users
  /api/admin/logs:
    get:
      summary: Fetch application logs
      responses:
        '200':
          description: Fetch application logs
  /api/search/users:
    get:
      summary: Search for users based on criteria
      responses:
        '200':
          description: Search for users based on criteria
  /api/search/roles:
    get:
      summary: Search for roles based on criteria
      responses:
        '200':
          description: Search for roles based on criteria
  /api/config:
    get:
      summary: Get system configuration
      responses:
        '200':
          description: Get system configuration
    put:
      summary: Update system configuration
      responses:
        '200':
          description: Update system configuration
  /api/audit/users/{id}:
    get:
      summary: 'Get audit logs for user with ID: {id}'
      parameters:
      - name: id
        in: path
        description: User ID
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: 'Get audit logs for user with ID: {id}'
  /api/audit/roles/{id}:
    get:
      summary: 'Get audit logs for role with ID: {id}'
      parameters:
      - name: id
        in: path
        description: Role ID
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: 'Get audit logs for role with ID: {id}'
  /api/health:
    get:
      summary: Health check for the application
      responses:
        '200':
          description: Health check for the application
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
        username:
          type: string
          description: User's username
        password:
          type: string
          format: password
          description: User's password
        role:
          type: string
          description: User's role
      required:
      - username
      - password
      - role
    UserRegistration:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
        role:
          type: string
      required:
      - username
      - password
    UserLogin:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
      required:
      - username
      - password
